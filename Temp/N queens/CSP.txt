public class Main {

    private int[] queens;
    private int boardSize;

    public Main(int boardSize) {
        this.boardSize = boardSize;
        this.queens = new int[boardSize];
    }

    public void solve() {
        if (placeQueens(0)) {
            printQueens();
        } else {
            System.out.println("No solution exists");
        }
    }

    private boolean placeQueens(int row) {
        if (row == boardSize) {
            return true; // All queens are placed successfully
        }

        for (int col = 0; col < boardSize; col++) {
            if (isSafe(row, col)) {
                queens[row] = col; // Place queen at this position
                if (placeQueens(row + 1)) {
                    return true; // Recursive call for the next row
                }
            }
        }
        return false; // Backtrack if no safe position is found
    }

    private boolean isSafe(int row, int col) {
        // Check if no queen exists in the same column or diagonal
        for (int i = 0; i < row; i++) {
            if (queens[i] == col || Math.abs(queens[i] - col) == Math.abs(i - row)) {
                return false;
            }
        }
        return true;
    }

    private void printQueens() {
        for (int i = 0; i < boardSize; i++) {
            for (int j = 0; j < boardSize; j++) {
                if (queens[i] == j) {
                    System.out.print("Q ");
                } else {
                    System.out.print(". ");
                }
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        int boardSize = 8; // Change this for different board sizes
        Main nQueensCSP = new Main(boardSize);
        nQueensCSP.solve();
    }
}
