import java.util.HashSet;
import java.util.Set;
import java.util.Stack;

class State {
    int jugA;
    int jugB;

    public State(int jugA, int jugB) {
        this.jugA = jugA;
        this.jugB = jugB;
    }

    @Override
    public int hashCode() {
        return 31 * jugA + jugB;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        State state = (State) obj;
        return jugA == state.jugA && jugB == state.jugB;
    }
}

public class WaterJugDFS {

    public static void main(String[] args) {
        int jugACapacity = 4;
        int jugBCapacity = 3;
        int targetAmount = 2;

        solveWaterJugProblem(jugACapacity, jugBCapacity, targetAmount);
    }

    private static void solveWaterJugProblem(int jugACapacity, int jugBCapacity, int targetAmount) {
        Stack<State> stack = new Stack<>();
        Set<State> visited = new HashSet<>();

        State initialState = new State(0, 0);
        stack.push(initialState);
        visited.add(initialState);

        while (!stack.isEmpty()) {
            State currentState = stack.pop();

            // Check if the target amount is reached
            if (currentState.jugA == targetAmount || currentState.jugB == targetAmount) {
                System.out.println("Solution found: (" + currentState.jugA + ", " + currentState.jugB + ")");
                return;
            }

            // Explore all possible moves (pouring water from one jug to another)
            exploreMove(stack, visited, new State(jugACapacity, currentState.jugB), currentState, jugACapacity);
            exploreMove(stack, visited, new State(currentState.jugA, jugBCapacity), currentState, jugBCapacity);
            exploreMove(stack, visited, new State(0, currentState.jugB), currentState, jugACapacity);
            exploreMove(stack, visited, new State(currentState.jugA, 0), currentState, jugBCapacity);
            exploreMove(stack, visited, new State(Math.min(jugACapacity, currentState.jugA + currentState.jugB),
                    currentState.jugB - (Math.min(jugACapacity, currentState.jugA + currentState.jugB))), currentState, jugACapacity);
            exploreMove(stack, visited, new State(currentState.jugA - (Math.min(jugBCapacity, currentState.jugA + currentState.jugB)),
                    Math.min(jugBCapacity, currentState.jugA + currentState.jugB)), currentState, jugBCapacity);
        }

        System.out.println("Solution not found.");
    }

    private static void exploreMove(Stack<State> stack, Set<State> visited, State nextState, State currentState, int capacity) {
        if (!visited.contains(nextState)) {
            stack.push(nextState);
            visited.add(nextState);
            // Print the state transition
            System.out.println("(" + currentState.jugA + ", " + currentState.jugB + ") -> (" + nextState.jugA + ", " + nextState.jugB + ")");
        }
    }
}
