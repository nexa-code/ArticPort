import java.util.*;

class State implements Comparable<State> {
    int missionariesLeft;
    int cannibalsLeft;
    int missionariesRight;
    int cannibalsRight;
    boolean boatOnLeft;
    int cost; // g(n)
    int heuristic; // h(n)

    public State(int missionariesLeft, int cannibalsLeft, int missionariesRight, int cannibalsRight, boolean boatOnLeft) {
        this.missionariesLeft = missionariesLeft;
        this.cannibalsLeft = cannibalsLeft;
        this.missionariesRight = missionariesRight;
        this.cannibalsRight = cannibalsRight;
        this.boatOnLeft = boatOnLeft;
    }

    public boolean isValid() {
        if (missionariesLeft < 0 || cannibalsLeft < 0 || missionariesRight < 0 || cannibalsRight < 0 ||
                (missionariesLeft > 0 && cannibalsLeft > missionariesLeft) ||
                (missionariesRight > 0 && cannibalsRight > missionariesRight)) {
            return false;
        }
        return true;
    }

    public boolean isGoal() {
        return missionariesLeft == 0 && cannibalsLeft == 0;
    }

    public State move(int missionaries, int cannibals) {
        if (boatOnLeft) {
            return new State(missionariesLeft - missionaries, cannibalsLeft - cannibals,
                    missionariesRight + missionaries, cannibalsRight + cannibals,
                    false);
        } else {
            return new State(missionariesLeft + missionaries, cannibalsLeft + cannibals,
                    missionariesRight - missionaries, cannibalsRight - cannibals,
                    true);
        }
    }

    // Heuristic function
    public int heuristic() {
        return missionariesLeft + cannibalsLeft;
    }

    @Override
    public int compareTo(State other) {
        // Compare based on the sum of cost and heuristic
        return Integer.compare(this.cost + this.heuristic, other.cost + other.heuristic);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        State state = (State) obj;
        return missionariesLeft == state.missionariesLeft &&
                cannibalsLeft == state.cannibalsLeft &&
                missionariesRight == state.missionariesRight &&
                cannibalsRight == state.cannibalsRight &&
                boatOnLeft == state.boatOnLeft;
    }

    @Override
    public int hashCode() {
        return Objects.hash(missionariesLeft, cannibalsLeft, missionariesRight, cannibalsRight, boatOnLeft);
    }

    @Override
    public String toString() {
        String boatSide = boatOnLeft ? "L" : "R";
        return missionariesLeft + "M" + cannibalsLeft + "C " + boatSide + "  " +
                missionariesRight + "M" + cannibalsRight + "C";
    }

    // Setter for cost
    public void setCost(int cost) {
        this.cost = cost;
    }

    // Getter for cost
    public int getCost() {
        return cost;
    }
}

public class Main {
    public static List<State> astar() {
        PriorityQueue<State> queue = new PriorityQueue<>();
        Set<State> visited = new HashSet<>();
        Map<State, State> parentMap = new HashMap<>();

        State initialState = new State(3, 3, 0, 0, true);
        initialState.setCost(0); // Set the initial cost to 0
        initialState.heuristic = initialState.heuristic(); // Initialize heuristic
        queue.add(initialState);
        visited.add(initialState);

        while (!queue.isEmpty()) {
            State currentState = queue.poll();

            if (currentState.isGoal()) {
                List<State> path = new ArrayList<>();
                while (currentState != null) {
                    path.add(currentState);
                    currentState = parentMap.get(currentState);
                }
                Collections.reverse(path);
                return path;
            }

            for (int missionaries = 0; missionaries <= 2; missionaries++) {
                for (int cannibals = 0; cannibals <= 2; cannibals++) {
                    if (missionaries + cannibals > 0 && missionaries + cannibals <= 2) {
                        State newState = currentState.move(missionaries, cannibals);
                        if (newState.isValid() && !visited.contains(newState)) {
                            newState.setCost(currentState.getCost() + 1); // Increment the cost
                            newState.heuristic = newState.heuristic(); // Update heuristic
                            queue.add(newState);
                            visited.add(newState);
                            parentMap.put(newState, currentState);
                        }
                    }
                }
            }
        }

        return null; // No solution found
    }

    public static void printSteps(List<State> path) {
        for (int i = 0; i < path.size() - 1; i++) {
            State from = path.get(i);
            State to = path.get(i + 1);

            int missionariesMoved = Math.abs(to.missionariesLeft - from.missionariesLeft);
            int cannibalsMoved = Math.abs(to.cannibalsLeft - from.cannibalsLeft);

            String action = from.boatOnLeft ? "L" : "R";
            System.out.println(missionariesMoved + "M" + cannibalsMoved + "C " + action);
        }
    }

    public static void main(String[] args) {
        List<State> solution = astar();
        if (solution != null) {
            System.out.println("Solution found!");
            for (State state : solution) {
                System.out.println(state);
            }
            System.out.println("Steps:");
            printSteps(solution);
        } else {
            System.out.println("No solution found.");
        }
    }
}
