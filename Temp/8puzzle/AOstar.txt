import java.util.*;

class PuzzleNode implements Comparable<PuzzleNode> {
    int[][] puzzle;
    int cost;
    int heuristic;
    PuzzleNode parent;

    public PuzzleNode(int[][] puzzle, int cost, int heuristic, PuzzleNode parent) {
        this.puzzle = puzzle;
        this.cost = cost;
        this.heuristic = heuristic;
        this.parent = parent;
    }

    @Override
    public int compareTo(PuzzleNode other) {
        return Integer.compare(cost + heuristic, other.cost + other.heuristic);
    }
}

public class AStar {

    public static void main(String[] args) {
        int[][] initialPuzzle = {
                {1, 2, 3},
                {4, 5, 0},
                {7, 8, 6}
        };

        int[][] goalPuzzle = {
                {1, 2, 3},
                {4, 5, 6},
                {7, 8, 0}
        };

        solvePuzzle(initialPuzzle, goalPuzzle);
    }

    public static void solvePuzzle(int[][] initial, int[][] goal) {
        PriorityQueue<PuzzleNode> openSet = new PriorityQueue<>();
        Set<String> visited = new HashSet<>();

        PuzzleNode initialNode = new PuzzleNode(initial, 0, calculateHeuristic(initial, goal), null);
        openSet.add(initialNode);

        while (!openSet.isEmpty()) {
            PuzzleNode current = openSet.poll();

            if (Arrays.deepEquals(current.puzzle, goal)) {
                printSolution(current);
                return;
            }

            visited.add(Arrays.deepToString(current.puzzle));

            for (PuzzleNode neighbor : getNeighbors(current, goal)) {
                if (!visited.contains(Arrays.deepToString(neighbor.puzzle))) {
                    openSet.add(neighbor);
                }
            }
        }

        System.out.println("No solution found.");
    }

    private static List<PuzzleNode> getNeighbors(PuzzleNode node, int[][] goal) {
        List<PuzzleNode> neighbors = new ArrayList<>();
        int[][] directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};

        for (int[] dir : directions) {
            int newX = emptyX(node.puzzle) + dir[0];
            int newY = emptyY(node.puzzle) + dir[1];

            if (isValid(newX, newY)) {
                int[][] newPuzzle = copyPuzzle(node.puzzle);
                swap(newPuzzle, emptyX(node.puzzle), emptyY(node.puzzle), newX, newY);
                int newCost = node.cost + 1;
                int newHeuristic = calculateHeuristic(newPuzzle, goal);
                PuzzleNode neighbor = new PuzzleNode(newPuzzle, newCost, newHeuristic, node);
                neighbors.add(neighbor);
            }
        }

        return neighbors;
    }

    private static int emptyX(int[][] puzzle) {
        for (int i = 0; i < puzzle.length; i++) {
            for (int j = 0; j < puzzle[i].length; j++) {
                if (puzzle[i][j] == 0) {
                    return i;
                }
            }
        }
        return -1;
    }

    private static int emptyY(int[][] puzzle) {
        for (int i = 0; i < puzzle.length; i++) {
            for (int j = 0; j < puzzle[i].length; j++) {
                if (puzzle[i][j] == 0) {
                    return j;
                }
            }
        }
        return -1;
    }

    private static boolean isValid(int x, int y) {
        return x >= 0 && x < 3 && y >= 0 && y < 3;
    }

    private static int[][] copyPuzzle(int[][] puzzle) {
        int[][] copy = new int[puzzle.length][];
        for (int i = 0; i < puzzle.length; i++) {
            copy[i] = Arrays.copyOf(puzzle[i], puzzle[i].length);
        }
        return copy;
    }

    private static void swap(int[][] puzzle, int x1, int y1, int x2, int y2) {
        int temp = puzzle[x1][y1];
        puzzle[x1][y1] = puzzle[x2][y2];
        puzzle[x2][y2] = temp;
    }

    private static int calculateHeuristic(int[][] puzzle, int[][] goal) {
        int heuristic = 0;
        for (int i = 0; i < puzzle.length; i++) {
            for (int j = 0; j < puzzle[i].length; j++) {
                if (puzzle[i][j] != 0 && puzzle[i][j] != goal[i][j]) {
                    heuristic++;
                }
            }
        }
        return heuristic;
    }

    private static void printSolution(PuzzleNode node) {
        List<PuzzleNode> path = new ArrayList<>();
        while (node != null) {
            path.add(node);
            node = node.parent;
        }

        for (int i = path.size() - 1; i >= 0; i--) {
            printPuzzle(path.get(i).puzzle);
            System.out.println("Step cost: " + path.get(i).cost);
            System.out.println();
        }
    }

    private static void printPuzzle(int[][] puzzle) {
        for (int i = 0; i < puzzle.length; i++) {
            for (int j = 0; j < puzzle[i].length; j++) {
                System.out.print(puzzle[i][j] + " ");
            }
            System.out.println();
        }
    }
}
