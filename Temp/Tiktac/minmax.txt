import java.util.Scanner;

public class Main {
    private char[][] board;
    private char currentPlayer;

    public Main() {
        board = new char[3][3];
        for (int i = 0; i < 3; i++) {
            java.util.Arrays.fill(board[i], '-');
        }
        currentPlayer = 'X'; // Player 'X' starts the game
    }

    public boolean playTurn(int row, int col) {
        if (row >= 0 && row < 3 && col >= 0 && col < 3 && board[row][col] == '-') {
            board[row][col] = currentPlayer;
            return true;
        }
        return false;
    }

    public boolean isGameWon(char player) {
        for (int i = 0; i < 3; i++) {
            if (board[i][0] == player && board[i][1] == player && board[i][2] == player ||
                    board[0][i] == player && board[1][i] == player && board[2][i] == player)
                return true;
        }
        if (board[0][0] == player && board[1][1] == player && board[2][2] == player ||
                board[0][2] == player && board[1][1] == player && board[2][0] == player)
            return true;
        return false;
    }

    public boolean isBoardFull() {
        for (char[] row : board) {
            for (char cell : row) {
                if (cell == '-') {
                    return false;
                }
            }
        }
        return true;
    }

    public void printBoard() {
        for (char[] row : board) {
            for (char cell : row) {
                System.out.print(cell + " ");
            }
            System.out.println();
        }
        System.out.println();
    }

    public void changePlayer() {
        currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
    }

    public int[] getBestMove() {
        int bestScore = Integer.MIN_VALUE;
        int[] bestMove = new int[]{-1, -1};

        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] == '-') {
                    board[i][j] = currentPlayer;
                    int score = minimax(false);
                    board[i][j] = '-';
                    if (score > bestScore) {
                        bestScore = score;
                        bestMove = new int[]{i, j};
                    }
                }
            }
        }
        return bestMove;
    }

    public int minimax(boolean isMaximizing) {
        if (isGameWon('X')) {
            return 10;
        } else if (isGameWon('O')) {
            return -10;
        } else if (isBoardFull()) {
            return 0;
        }

        int bestScore = isMaximizing ? Integer.MIN_VALUE : Integer.MAX_VALUE;
        char player = isMaximizing ? 'X' : 'O';

        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] == '-') {
                    board[i][j] = player;
                    int score = minimax(!isMaximizing);
                    board[i][j] = '-';
                    if (isMaximizing) {
                        bestScore = Math.max(score, bestScore);
                    } else {
                        bestScore = Math.min(score, bestScore);
                    }
                }
            }
        }
        return bestScore;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Main game = new Main();

        while (true) {
            System.out.println("Current board:");
            game.printBoard();

            if (game.currentPlayer == 'X') {
                System.out.println("Player X's turn. Enter row and column (1-3):");
                int row = scanner.nextInt() - 1;
                int col = scanner.nextInt() - 1;
                if (!game.playTurn(row, col)) {
                    System.out.println("Invalid move, try again.");
                    continue;
                }
            } else {
                System.out.println("Player O's turn (AI):");
                int[] move = game.getBestMove();
                game.playTurn(move[0], move[1]);
                System.out.println("AI played at row " + (move[0] + 1) + ", column " + (move[1] + 1));
            }

            if (game.isGameWon(game.currentPlayer)) {
                System.out.println("Player " + game.currentPlayer + " wins!");
                break;
            } else if (game.isBoardFull()) {
                System.out.println("The game is a draw!");
                break;
            }

            game.changePlayer();
        }

        game.printBoard();
        scanner.close();
    }
}
